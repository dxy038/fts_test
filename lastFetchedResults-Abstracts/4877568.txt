Current and future military avionic systems require real-time embedded software based on the latest technological advances in software tools, capabilities, and languages. However, the development time and lifecycle of avionic systems is so long, that the tools, processes, methodologies, and languages used by the system developers are often obsolete by the time the systems need significant upgrades or replacement. Hence, software obsolescence is a major issue faced by many avionic systems. Previously, avionics programs have tackled software obsolescence using different approaches. These approaches have included code conversions by hand, which are costly and time consuming, scripting tools/languages which have scalability problems, emulators which involve re-engineering of the peripheral code base and retention of the obsolete code engineering environment, and software wrappers which are not costly but hinder future modifications to the legacy software that is accessed by the software wrappers. Each of these approaches has its own liabilities. For our research and development effort we chose to upgrade our legacy code base with a specially developed code refactoring transformer, the Boeing migration tool (BMT). Specially developed code transformers based on new technologies and more powerful computers are scalable, capable of converting almost the entire code base, allow for future development on the updated code base with the latest tools, processes, methodologies, and languages, and are less costly than updating code by hand. This paper details the inputs, the code transformer itself, the outputs, and how well the code transformer performed its task for updating a software code base. This work was performed for the Defense Advanced Research Projects Agency (DARPA) program composition for embedded systems (PCES) program. The resulting code base generated by the code transformer could be updated with the most recent tools, processes, and languages. DARPAÂ´s objective - was to find faster and easier software code base conversion processes that lead to new software code bases that were closer to the final product than previous mechanizations.
