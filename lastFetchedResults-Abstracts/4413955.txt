Autonomic computing seeks to render computing systems as self-managed. In other words, its objective is to enable computer systems to manage themselves so as to minimise the need for human input. Software architectures can be used in order to express constraints to be maintained all along the execution of a system and, conversely, to present the state of the running system. In this paper, we present an approach where design and runtime architectures are used to manage service-oriented systems. We show how concepts of design time and runtime can be linked and exploited by an autonomic manager or by a human administrator. This approach is validated on a real use case belonging to the pervasive domain.
