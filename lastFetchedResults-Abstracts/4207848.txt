Describes how automatic transformation technology can be used to construct a verified compiler for an imperative language. Our approach is to &#8220;transformationally&#8221; pass a source program through a series of canonical forms, each of which correspond to some goal or objective in the compilation process (e.g. introduction of registers, simplification of expressions, etc.). We describe a denotational semantics-based framework in which it is possible to verify the correctness of transformations; the correctness of the compiler follows from the correctness of the transformations
