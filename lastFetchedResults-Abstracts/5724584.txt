Automated mechanism design (AMD) seeks to find, using algorithms, the optimal rules of interaction (a mechanism) between selfish and rational agents in order to get the best outcome. Here optimal is defined by the objective function of the designer of the mechanism where the function has usually some desirable properties (e.g., Pareto optimal). A difficulty with AMD lies in the size of the optimization problem that one needs to solve in order to select the best mechanism: there is a huge number of variables (and constraints but to a lesser extent) even for AMD instances of relatively small size. We study how to adapt the column generation techniques in order to solve the linear programming UP formulation of the AMD problem and compare its efficiency with the classical simplex algorithm for linear programs, on a bartering of goods example. We show that the resulting column generation algorithm is very quickly faster than the simplex algorithm for a fixed number of types (i.e., preference relations) on the goods as the number of goods increases, and then for a fixed number of goods as the number of types increases. Moreover, we show that, as the number of goods increases, the percentage of variables that need to be explicitly considered by the column generation techniques comes down very fast while the simplex algorithm must always consider explicitly all variables.
