Part I (see ibid., pp. 414-421) provided a rigorous definition of the CSL (constraint specification language) algebra as a language to model the general n-ary logical constraint satisfaction problem (LCSP). In this paper, the majority of our discussions focus on design and implementational issues that arose while building software for compiling the language into executable data structures. The primary objective of the CSL compiler is to efficiently compile a CSL program (for a user-defined LCSP) into a form that can be solved by binary constraint satisfaction problem (CSP) algorithms
