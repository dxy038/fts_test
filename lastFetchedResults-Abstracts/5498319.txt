With the increasing complexity of embedded systems, component-based software development (CBSD) is regarded as a beneficial approach for embedded systems. For component technology, applications are built by assembling interacting components and interfaces are the means by which components interact. Embedded systems are usually safety-critical applications. There is a real need for clear and sound definition of operational semantics for the composition of components such that they may be used to direct the construction of the desired system and help to make analysis of behaviors and properties. This paper describes the composition semantics of component-based embedded software architecture in terms of the communicating sequential language (CSP). Three types of interfaces: procedure call, data access and event are classified. And the composition semantics for each type is presented. The overall objective is to provide a soundly based notation for specifying and verifying embedded software architectures.
