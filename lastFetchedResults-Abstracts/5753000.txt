Software development can be thought of as the evolution of abstract requirements into a concrete software system. The evolution, achieved through a successive series of transformations, is inherently a complex process. The inherent complexities, that often make these transformations sub-optimal, are further aggravated by inefficient capture and usage of requisite information during transformation. While some understanding of software may be reasonably clear at a given time, the future dependencies may not be fully understood or accessible. The clarifications obtained over time make the system more concretely understood, but there may be software information leaks (SILs) as some relevant information is lost. Some key SILs may be due to failure to be fully acquainted with dependencies between various software artifacts. In this paper, our objective is to define SILs as concept, codify an essential set of canonical leaks, and introduce solutions for dealing with some of them.
