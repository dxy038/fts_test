In conventional two-tier client-server databases, clients access and modify shared data resident in a common server. As the number of clients increases, the centralized database server can become a performance bottleneck. In order to overcome this scalability problem, a three-tier client-server configuration has been proposed that features the partitioning of clients into logical clusters. Here, the objective is to maximize the data sharing among the clients in each cluster. We propose a genetic algorithm to create such client clusters and evaluate two different techniques for generating the initial solution populations. We compare the performance of the two-tier and three-tier configurations with respect to the transaction turnaround times and object response times. Our experimental results indicate that the clustered architecture can offer improved performance over its two-tier counterpart
