Software is becoming central to every aspect to our life. Therefore, developing highly reliable software while considering budget limitations is becoming very important. Because of their increasing complexity, software products are implemented using available modules and by performing many programming, testing and integrating tasks. The purpose of this research is to allocate resources efficiency to these activities so that the reliability of a software package will be maximized. The paper includes an optimization model for deriving cost allocations while satisfying a budget constraint. The model allows a decision maker to consider the usage of available modules in the market as well as the option of developing them in-house.
It is becoming increasingly difficult to create software products that simultaneously provide high reliability, rapid delivery and low cost. This research deals with the cost of achieving reliable software. Assume a software package has been designed and is ready for implementation. To implement this software package, a set of modules will have to be purchased and many programming and integration tasks will have to be performed. The performance of a programming task consists of the detailed design of a module, coding and unit testing. An integration task consists of the additional testing and debugging needed when the code included in separately tested tasks is joined together. The implementation process ends when the package has been integrated and tested. A model for deriving cost allocations is presented. The objective of the model is to maximize reliability while satisfying a budget constraint. The option of developing modules in-house as well as the option of purchasing them if available are considered in the optimization. The paper includes a branch and bound scheme to derive an optimal solution.

