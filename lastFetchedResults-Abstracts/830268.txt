Topology optimization has been the focus of considerable attention in the shape optimization community in recent years, since significant performance improvements can be obtained if the topology is allowed to vary in shape optimization problems. Attention has mainly focussed on the topology design of an elastic continuum for minimum compliance subject to a volume constraint. The macroscopic version of this problem is not well-posed if no restrictions are placed on the structure topology.

The most widely-used method for making the problem has been the so-called homogenization method which introduces microstructure to the design space. Though there are a number of advantages to this method, it also suffers from some drawbacks. Optimal designs generated using an optimal microstructure are difficult to manufacture, while using sub-optimal microstructures reverts the problem back to the original ill-posed problem. In addition, extension of the homogenization method to problems involving non-linear material behavior is quite difficult.

To address some of these issues, a new method for making the compliance optimization problem well-posed has recently been proposed. This method introduces an additional constraint on the perimeter of the solid regions in the design, to make the problem well-posed. Since microstructure is not introduced, the designs are easily manufacturable. Preliminary results for topology design, using the perimeter method, for problems where the material behavior is linear elastic have already been reported in the literature.

We show that the perimeter method can be used even when the material behavior involves material and geometric non-linearities. We formulate the distributed-parameter optimization and topology design problems (using the perimeter method) for non-linear thermoelasticity. Finite element optimization procedures based on this formulation are developed and numerical solutions for the distributed-parameter optimization problem are presented. Though we use the compliance as the objective function, one could optimize any objective function by making minor modifications in the method outlined here.
