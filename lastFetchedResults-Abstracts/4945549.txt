We concentrate on non-preemptive hard real-time scheduling algorithms. We compare FIFO, EDLF, SRTF and genetic algorithms for solving this problem. The objective of the scheduling algorithm is to dynamically schedule as many tasks as possible such that each task meets its execution deadline, while minimizing the total delay time of all of the tasks. We present a MicroGA that uses a small population size of 10 chromosomes, running for 10 trials using a rather high mutation rate with a sliding window of 10 tasks. The steady-state GA was determined to be better than the generational GA for our MicroGA. We also present a parallel MicroGA model designed for parallel processors. The parallel MicroGA works best when migration is used to move tasks from one processor to another to even out the load as much a possible. Test cases show that the sequential MicroGA model and the parallel MicroGA model produced superior task schedules compared to other algorithms tested
