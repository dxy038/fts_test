TCP Cubic is designed to better utilize high bandwidth-delay product paths in IP networks. It is currently the default TCP version in the Linux kernel. Our objective in this work is to better understand the performance of TCP Cubic in scenarios with a large number of competing long-lived TCP flows, as can be observed, e.g., in cloud environments. In such situations, Cubic connections tend to synchronize each other and this synchronization is higher than with TCP New Reno. We investigate this phenomenon in detail through experimentations in a controlled testbed, measurements with Amazon EC2Â´s servers, located in the US and simulations. We demonstrate that several factors contribute to the appearance of synchronization in TCP Cubic: (i) the rate of growth of the congestion window when a Cubic source reaches the capacity of the network and its relation to the RTT of the connection, (ii) the way the congestion Cubic tracks the ideal cubic curve in the kernel (as the congestion window grows in a discrete fashion in units of MSS while the cubic curve assumes a fluid window), (iii) the competition among the Cubic sources and the aggressiveness of the sources that did not experience losses during the last loss episode. We also propose and evaluate two propositions to the TCP Cubic algorithm to alleviate the amount of packets lost during the synchronization episodes.
