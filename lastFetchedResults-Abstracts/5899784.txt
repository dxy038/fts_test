Two major strategies exist for the exploitation of parallel execution on shared memory multiprocessors. Multiple threads of execution can be created within a shared program context and loop iterations can be scheduled between processors. While the two techniques are well established in isolation, the design of large, general purpose multi-user multiprocessors requires a seamless blend. The authors examine a set of system structures which combine the two parallel computing models to exploit inherent program parallelism. The objective is a general purpose parallel programming environment in which programs can create as many threads as desired, which are scheduled on the share of processor resource allocated to the program. From within any of these threads, the self scheduling of iterations interacts with the thread management so that free processor resource is dynamically allocated to parallel iterations
