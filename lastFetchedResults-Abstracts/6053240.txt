The paper addresses the problem of scheduling MPI tasks on the processing nodes of an MPI environment. The authors introduce a static scheduling system, in which program requirements are gathered, dependencies among the tasks are figured out, the computing environment is characterized, and a task assignment is generated. They introduce a tool, called the sniffer which utilizes MPI to benchmark an existing computing environment. The sniffer collects information regarding the network performance, the power of the processing nodes, and the system load in general. They also present a scheduling system, which heuristically produces an allocation of MPI tasks onto processing nodes. The objective is to minimize the total completion time of the MPI program. The scheduling system uses program characterization in terms of processing, communication, synchronization, and dependencies; and the environment information collected by the sniffer to make scheduling decisions
