The objective of software engineering is modeling software systems to support effective system synthesis and analysis. The traditional approach is using semi-formal models and accompanying design methodologies. Formal models represent an alternative to semi-formal models supporting precise representation and proof capabilities. These two approaches are complimentary, not competitive. Formal methods have had difficulty finding their way into the software engineering lifecycle. Although excellent CASE tools exist to support semi-formal methods, tools for formal methods support have yet to emerge. Although model checkers, proof tools and the like exist for formal models, they provide little support for the software lifecycle. Traditional CASE environments provide little or no support for formal models. In addition, formal methods and the mathematics necessary to support them have not found their way into standard software engineering curriculum. Thus, formal methods practitioners have found it difficult to present their work in some industrial settings. Using formal and semi-formal methods together should satisfy both the need to predict behavior and have understandable system representations. Although this article presents only structured analysis, formal methods can contribute to virtually any semi-formal software engineering methodology in the same manner
