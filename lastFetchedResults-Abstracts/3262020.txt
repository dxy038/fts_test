Nowadays, due to massively parallel characteristics of current many-core architectures, these devices are not only being used in order to exploit data-parallelism and to minimize the execution time in a single problem, but, they are beginning to be used in order both to execute and to increase the performances when executing more than one application simultaneously. In this work, we provide a performance analysis on the use of current many-core architectures for this new purpose; this performance analysis has been carried out over two different many-core architectures. Furthermore, two different programming approaches to tackle this new role have been tested. The results so obtained show that a increase in the computational requirements implies an important fall in performance. The main objective of this paper is to explain the reasons for this behavior, and afterwards, to propose a set of alternatives to deal with these disadvantages previously mentioned.
