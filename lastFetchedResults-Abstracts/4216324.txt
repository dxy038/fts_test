In this paper, we consider a combinatorial optimization problem of scheduling n jobs of block type on linearly aligned m identical machines. Each job J<sub>j</sub> is characterized by four integers, an arrival time a<sub>j</sub> , a processing time p<sub>j</sub>, the number q<sub>j</sub> of consecutive machines required by the job (hence, each job J<sub>j</sub> can be represented by a rectangular block with the size of p<sub>j</sub> &#215; q<sub>j</sub> in a geometrical interpretation), and a weight w<sub>j</sub>. There is a choice for each job whether the aligned machines serve it or not. If the aligned machines choose (i.e., serve) a job J<sub>j</sub>, they gain the weight w<sub>j</sub> as their profit. However, they have to start the service of the chosen job promptly after it arrives (i.e., they have to start the service exactly at time t = a<sub>j</sub> ), selecting q<sub>j</sub> consecutive machines in the alignment. Every machine can handle at most one job at a time, and no preemption is allowed for the services of jobs. The objective is to find a feasible schedule that maximizes the weighted number of chosen jobs. It has already been known that the scheduling problem is NP-hard for an arbitrary m. In this paper, we propose a polynomial time heuristic algorithm based on a transformation into the minimum cost flow problem, and prove that the approximation ratio is &#8970;m/q<sub>min</sub>&#8971; / &#8970;m/q<sub>max</sub>&#8971;, where q<sub>min</sub> = min<sub>1 &#8804; j &#8804; n</sub>{q<sub>j</sub>} and q<sub>max</sub> = max<sub>1 &#8804; j &#8804; n</sub>{q<sub>j</sub>}.
