Power generation scheduling is a constrained optimization problem whose solution determines the set of generating units, among those owned by the electric utility, that should be connected to the grid at any hourly interval over a period of time, lasting from a day to a week, such that an objective function–usually, cost of operation–, is minimized. The actual power generation allocated to each committed unit is typically determined by an economic dispatch to meet the actual system load demand that may deviate from the forecasted one. Dynamic programming is considered an effective solution technique in power systems, not only because scheduling is naturally a sequential decision process, but also because formulation of the unit commitment problem results in a non-linear, non-convex, time dependent, and mix-integer problem that is not easily amenable to other solution techniques. Although dynamic programming-based solution algorithms provide optimal commitment schedules, execution time and memory requirements are affected by the “curse of dimensionality,” that is by the number of unit combinations to be considered in the solution process.

In dynamic programming-based power scheduling algorithms, thousands of hourly economic dispatches must be performed to consider every possible unit combination over all the stages of the optimization interval. If the unit commitment problem is constrained to observe a minimum system spinning reserve and an economic dispatch of a combination of units does not comply with this requirement, necessary and sufficient conditions have been established to guarantee that the dispatch of these units will meet the constraint. However, these conditions can only be checked for feasibility after a dispatch is performed. In this paper, we present necessary and sufficient conditions for the feasibility of unit combinations that can be checked off-line — that is, before the start of the unit commitment algorithm, and thus before any economic dispatches are performed, thereby rendering a very efficient unit scheduling algorithm in terms of computer memory and execution time. Moreover, these feasibility conditions are independent of the problem formulation and thus can easily be applied to other unit commitment algorithms. Examples are provided to illustrate the efficiency attainable by the implementation of these conditions.
