The processor allocation problem in an n-dimensional hypercube (or an n-cube) multiprocessor is similar to the conventional memory allocation problem. The main objective in both problems is to maximize the utilization of available resources as well as minimize the inherent system fragmentation. A processor allocation strategy using the buddy system, called the buddy strategy, is discussed first and then a new allocation strategy using a Gray code (GC), called the GC strategy, is proposed. When processor relinquishment is not considered (i.e., static allocation), both of these strategies are proved to be optimal in the sense that each incoming request sequence is always assigned to a minimal subcube. It is also shown that the GC strategy outperforms the buddy strategy in detecting the availability of subcubes. Our results are extended further to implement an allocation strategy using more than one GC and derive the relationship between the GC´s used and the corresponding ability of detecting the availability of various subcubes. The minimal number of GC´s required for complete subcube recognition in a Q<inf>n</inf> is proved to be less than or equal to C<inf>[n/2]</inf><sup>n</sup>. Several processor allocation strategies in a Q<inf>5</inf> are implemented on the NCUBE/six multiprocessor at the University of Michigan, and their performance is experimentally measured.
