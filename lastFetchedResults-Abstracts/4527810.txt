The multi-agent systems are successfully used in modeling of dynamic complex systems, and simulations of these models reinforce the knowledge of experts and even allow them to explore new horizons or to cross boundaries. This is the reason why the models being tackled are increasingly varied, and as one goes along with experimentations, these models are completed, intercrossed. Consequently they become increasingly complex. In our previous work, we proposed a first modeling approach to support this complexity increase: the Dynamic-Oriented Modeling (DOM). The application of this approach can effectively support the increase of the model. This increase applies to both agents and environments. This DOM approach tackles the problem of the latter by splitting in multiple parts. But if DOM led to organize properly the multiple environments that come into play, little support is provided to organize and manage the increasing complexity of the agents themselves. Inevitably, when we reach a quite advanced stage of evolution of the model, the agents eventually reach a critical mass (either in formalization or code) that makes them more and more hard to comprehend. In this paper, we illustrate this phenomenon and show that it quickly takes the upper hand against the benefits of DOM, as it can eventually block the potential development, or even reuse, of the model. Then we explain that a solution to this "side effect" could structure the architecture of agents, a structure capable of maintaining readability and flexibility of the formalization of the agent throughout the growth process of the global model. We study a well known pattern in software engineering: the MVC pattern, which can be reused here to meet this objective. We will present in details how this pattern could be instantiated in the field of MAS architecture, and how, ultimately, it can be an effective new way to formalize agents in a method called Multi-Behaviors Modelization.
