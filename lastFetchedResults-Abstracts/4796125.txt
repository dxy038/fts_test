The Java messaging service (JMS) is a means to organize communication among distributed applications according to the publish/subscribe principle. If the subscribers install filter rules on the JMS server, JMS can be used as a message routing platform, but it is not clear whether its message throughput is sufficiently high to support large-scale systems. We perform measurements for the FioranoMQ JMS server and derive a simple model for its message processing time that takes message filters and the message replication grade into account. Then, we analyze the JMS server capacity and the message waiting time for various application scenarios. We show that the message waiting time is not an issue as long as the server throughput is sufficiently high. Finally, we assess the capacity of two different distributed JMS architectures whose objective is to increase the capacity of the JMS beyond the limit of a single server.
