Architecture models are built in parallel with applicative models, all along the development process. Since they equally refer to software and hardware components in which they are implemented, these models call for more heterogeneous design languages, with a larger granularity range too. At the level of design and verification languages, some standards have risen up, like UML, AADL, but none of them is driven by a standard methodology. To be able to follow the requirements traceability, at each step of the life cycle, we need a methodology that states for bidirectional links between each granularity level and each development level. In this article, we propose an approach based on systematic reuse of low-level concepts (borrowed from an algorithm language like +CAL and a programming language like Ada) into encapsulated algorithm structures which are implemented into the highest conceptual levels of development (e.g. from the UML and AADL component models). These structures are only activated and enriched as they advanced with the life cycle. Therefore, some new concepts presents from the beginning of the design, will play an important role in the further development steps without being explicitly expressed from the beginning.
