We deal with a situation where a worker processes two kinds of jobs, job A and job B. Job A is processed in a certain queueing system, and job B is processed separately from the queueing system if the worker is not in the queueing system. The process of job B consists of several tasks. The number of the tasks is distributed and each task needs a constant time. At each end of task, the worker can know whether all tasks are completed, and a decision is made whether the process of job B is suspended to join the queue. If the process of job B is suspended, the worker joins the queue and the residual tasks are processed after job A has been processed. The objective is to minimize the expected time until two jobs are completed. We prove a monotone property of the optimal policy by a dynamic programming formulation.
