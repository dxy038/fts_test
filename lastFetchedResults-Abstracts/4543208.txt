Modern compilers usually provide a large number of optimization options to aid users to fine tune their programs for the best performance. However, applying such optimization options involves complex knowledge about compiler optimization, so most users do not have the capability to utilize these optimization options. Iterative compilation is currently the most common approach to searching for the optimal set of optimization options for a program. There are several interesting performance metrics in compiler optimization: execution time, compilation time, code size, memory space, power consumption, and other computing resources. This paper investigates multi-objective optimization of execution time and code size in iterative compilation using the popular multi-objective genetic algorithm NSGA-II. The experimental results show that the optimization options computed by the NSGA-II algorithm is superior to the ones generated by the random search algorithm and the ones corresponding to the optimization levels provided by the compiler.
