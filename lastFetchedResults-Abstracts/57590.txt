The objective of implementation is to bridge the gap between the specification model and available implementation technology. The ongoing trend in electronic design automation is to widen this gap by introducing more abstract specification models to produce increasingly complex systems within shorter time spans. At the same time, advances in implementation tools and methods have been less dramatic. In this paper, we discuss a case study that models an access cycle in the Industry Standard Architecture bus and present systematic methods for implementing state-based specifications in software and hardware. We focus on the formal properties known as safety––characterizations of the kind `nothing bad ever happens'––and liveness––characterizations of the kind `something good eventually happens'. Particular emphasis is laid on liveness properties and scheduling since these are the driving force that make things happen in operational specifications. We represent specifications graphically using the Temporal Logic of Actions, a logic that models system behaviour by sequences of states.
