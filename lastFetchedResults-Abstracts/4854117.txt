Traditional software testing checks to see if a software product meets specifications. This generally involves testing to see if the software performs all the functions called for in the software requirements specifications (SRS). In contrast, this work-in-progress paper proposes a testing paradigm that does not have this objective. The proposed testing paradigm tests to see if a software product exhibits proper behavior when subject to improper usage or improper input. For lack of a more descriptive name and in compliance with similar testing performed on hardware systems, the new paradigm is called "destructive testing". As presented in this paper, destructive testing does not replace conventional testing, rather destructive testing supplements conventional testing (calls for additional testing beyond conventional testing). The paper discusses other uses of the term "destructive testing" as applied to software systems. Conventional testing techniques are ranked based on applicability to destructive testing. Techniques of incorporating destructive testing requirements into the SRS are proposed, the need and rational for destructive testing is discussed, and ongoing and future work in destructive testing is outlined
