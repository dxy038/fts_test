Programming distributed memory parallel computers with explicit message passing refrains the use of this type of architecture. The objective is to provide a programmed environment which will hide the message passing aspects of DMPCs, and will allow the use of traditional languages as input. The paper describes two different approaches which satisfy this goal: a compiler which translates sequential code into distributed parallel processes and a shared virtual memory which offers to the user a global address space. Examples and results for both mechanisms are given. The hope and the interest of each approach is outlined
