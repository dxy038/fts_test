In devising a programming model to act as an interface between various distributed memory MIMD hardware designs and application software there are clearly two alternative assumptions. One is that since machines differ in connectivity, portability can only be achieved by hiding these differences, and therefore the programming model must be of a set of processors with full virtual connectivity. This is achieved by supporting indirect communication either by message-forwarding software or by hardware. The other says that since the objective of going parallel is to achieve high performance, we wish to match process connectivity to processor connectivity as closely as possible. Message-forwarding may still be relevant (and used) if the underlying hardware has valency limits which preclude exact matching. The paper explores the implications for hardware design of each of these assumptions
