The Spring real-time system and environment provides methods for program representation and corresponding run-time system support that allow programs to meet the predictability demands of complex real-time applications. The primary objective of the work described in this paper is to present the experiences gained and the lessons learned from porting a real-world, real-time application to make it predictable and flexible. The exercise has also provided a test case which helps to answer questions about the completeness and ease of use of software development tools that have been developed to provide for flexibility while achieving real-time guarantees. This test case is derived from an existing real-time application in industry-a robotic work-cell that is currently in use for the assembly of circuit boards. From our experience with this reengineering exercise, we believe that a user must possess a good understanding of the following: (1) the general properties of the target hardware-for effective process and resource layout, and (2) the shared resource usage and interprocess communication, and, more generally, the statements that cause processes to suspend-for efficient run-time representation of the tasks. Tools that help the user obtain this understanding and perform detailed timing analysis are essential. Although the algorithms and tools used in the reimplementation were developed in the context of the Spring real-time environment, we believe that the lessons learned from this experiment will be useful not only to potential users of Spring, but also to real-time practitioners at large
