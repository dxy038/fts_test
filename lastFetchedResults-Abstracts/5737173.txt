The model-driven approach to software development has not only changed the way software systems are built and maintained but also the way they are tested. For such systems, a model-based testing approach is much recommended since it is aligned with the new model-driven development paradigm that favors models over code with the objective being to reduce time to market while improving product quality. There has been a noticeable increase in the number of model-driven testing techniques in recent years. Although these techniques have a common objective they tend to vary significantly in their design. In this paper, we discuss the model-driven testing techniques presented in 15 different studies. We compare these techniques according to specific criteria including the modeling language used to represent the system design artifacts, the ability to automatically generate test cases, the testing target, and tool support.
