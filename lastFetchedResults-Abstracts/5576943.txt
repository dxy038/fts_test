The objective of this work is to optimize the behavior of a real-time Java system, by identifying and then reaffecting resources which have been allocated to tasks but unused. The tasks in question are periodic tasks which produce aperiodic events such as exceptions. In a real-time system, guaranteeing the task response time leads to resource reservation (CPU, Memory) necessary to their execution. Resource reservation is nevertheless essential because the worst case scenario, where all events are produced at their maximum frequency, is the one that must be catered for. In many cases the worst case scenario never materialises and a part of the resources is wasted. The objective of this work is to present a reclamation mechanism for unused resources. This applies to asynchronous events which have not been activated and other events which we are certain will remain inactivated. An asynchronous event is, at the same time, an object (the AsyncEvent) and the associated handler of that object (AsyncEventHandler). A meta-event is an object used to specify the relationship between asynchronous events. It is this relationship which will enable us to predict the resources which will remain unused and can thus be reallocated. In this paper we will discuss three points. What quantity of resources can be saved from each task ? When can they be collected and for how long will they be available ?
