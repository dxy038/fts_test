Adopting multicore platforms for real-time systems has recently been an active topic for both academia and industry. For hard real-time systems, the static worst-case execution time (WCET) analysis is usually needed for analyzing the schedulability. However, as the execution of a job depends on its input data, its internal state, and the architectural state, the worst-case execution time may be much larger than the typical execution time. Even though the jobs have unpredictable execution behavior, the practice now is to consider the feasibility and schedulability of the system based on their worst-case execution times. Therefore, the utilization of the system may be very low in most cases. This paper exploits a new scheme by adopting one core for executing tasks under their typical execution behavior, while the gap of the execution time between the typical case and the worst case is served on the other core. The objective is to use only one core most of time, whereas the second core is activated when it is necessary. We analyze the ineffectiveness when adopting the end-to-end deadline approaches in distributed systems for our studied problem. We show the connection of this problem to the well-known two-stage flowshop scheduling problem when considering frame-based real-time tasks, in which all the tasks have the same relative deadline and period. For general cases, in which tasks have different relative deadlines or periods, we provide a prioritization heuristic algorithm and its schedulability analysis. We also evaluate our algorithms to show the effectiveness.
