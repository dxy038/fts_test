In contrast to other areas of software design, in control applications the concepts of software quality following ISO/IEC 9126 standard are not very common. However, a primary goal in applying formal methods to controller design is the transparency of the resulting algorithm. An algorithm is said to be transparent if it is &#8220;easy and clear to see&#8221; what the controller does in the moment and what it will do in the next steps. In the paper the relation of this transparency concept to software quality is shown. Yet, the definition of transparency is vague and depends mainly on the subjective opinion on what &#8220;easy and clear to see&#8221; means. There are several aspects of a control algorithm that can be compared on an objective basis. In the paper the ability of different graphical controller design methods-finite automata, switching interpreted Petri nets (SIPN) and sequential function chart (SFC) according to IEC1131 standard-to describe an algorithm in a transparent way is compared. Furthermore, a number of criteria for transparency are given. These criteria cover different aspects such as number of comments, directionality and I/O-behavior. They are combined in a weighted sum to an automatically computable metric. The results of the presented method are twofold: first a set of rules for transparent controller design in the framework of SIPN and SFC is derived and secondly a metric which allows the comparison of the transparency of different control algorithms is achieved. The first result is interesting for the industrial application of the graphical design methods whereas the second result can be used for educational purposes and for optimization
