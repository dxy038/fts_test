Many distributed hash table topologies, such as Pastry, allow flexible choosing of a peerÂ´s neighbors while maintaining routing consistency. Traditionally, such flexibility has been used to only optimize the overlay only for latency. In this paper, we create a set of objective functions that allow a peer to select neighbors for its routing table which minimize ping time, maximize bandwidth, or attempt to do both. In conjunction with a novel algorithm for quickly finding peers that maximize a given objective function without settling to a local maximum in the identifier space, we show through simulation that routing tables optimized in a greedy fashion by each node can have significant impact on end-to-end latency and capacity, such as reducing end-to-end delay by over 50 percent.
