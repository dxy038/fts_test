The mapping of very-high-level problem specifications to general-purpose parallel machines is addressed. The objective is to illustrate how such mappings can be successfully achieved by the implementation of a very-high-level, architecture-independent programming language. At the foundation, a macro-parallel abstract machine is devised and combined with a substitution model of functional languages. Features such as data parallelism, functional composition, abstraction, and recursion, give the full power of parallel algorithm specification. These are unified and supported in a single language known as Crystal. A procedure for programming languages, called hyper-stack, is devised for calls to parallel modules.&lt;<etx>&gt;</etx>
